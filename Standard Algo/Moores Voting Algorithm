/*
Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears more than N/2 times in the array.
 

Example 1:

Input:
N = 3 
A[] = {1,2,3} 
Output:
-1
Explanation:
Since, each element in 
{1,2,3} appears only once so there 
is no majority element.
Example 2:

Input:
N = 5 
A[] = {3,1,3,3,2} 
Output:
3
Explanation:
Since, 3 is present more
than N/2 times, so it is 
the majority element.

Your Task:
The task is to complete the function majorityElement() which returns the majority element in the array. If no majority exists, return -1.
 

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).
 

Constraints:
1 ≤ N ≤ 107
0 ≤ Ai ≤ 106

*/
//Approach first find index of majority element by moores algorithm then check the condition of if freq is >n/2 

class Solution
{
    static int majorityElement(int a[], int size)
    {
        int majority_index=0,count=1;
        
        for(int i=1;i<a.length;i++){
            if(a[majority_index]==a[i]){
                count++;
            }else{
                count--;
            }
            
            if(count==0){
                majority_index=i;
                count=1;
            }
        }
        
        int num=a[majority_index];
        
        int freq=0;
        
        for(int i=0;i<a.length;i++){
            if(num==a[i]){
                freq++;
            }
        }
        
        if(freq>a.length/2){
            return a[majority_index];
        }
        
        return -1;
    }
}
