public class Knapsack {

    public  static  int knapsack(int weight[],int values[],int maxweight,int i){
        if(i==weight.length || maxweight==0){
            return 0;
        }

        if(weight[i]>maxweight){
            return  knapsack(weight,values,maxweight,i+1);
        }else{
            int op1=values[i]+knapsack(weight,values,maxweight-weight[i],i+1);
            int op2=knapsack(weight,values,maxweight,i+1);

            return Math.max(op1,op2);
        }

    }
    public  static int knapsackM(int weight[],int values[],int maxweight,int z){
        int dp[][]=new int[values.length+1][maxweight+1];

        for(int i=0;i<=values.length;i++) {
            for (int j = 0; j <= maxweight; j++) {
                dp[i][j] = -1;
            }
        }
        return knapsackM(weight,values,maxweight,dp,values.length);

    }

    public  static  int knapsackM(int weight[],int values[],int w,int dp[][],int n){
        if(w==0 || n==0){
            return 0;
        }
        if(dp[n][w]!=-1){
            return dp[n][w];
        }

        if(weight[n-1]>w){
            return dp[n][w]=knapsackM(weight,values,w,dp,n-1);
        }else{
            return dp[n][w]=Math.max(values[n-1]+knapsackM(weight,values,w-weight[n-1],dp,n-1),
                    knapsackM(weight,values,w,dp,n-1));
        }


    }
    public static void main(String args[]){
        int weights[]= {6,1,2,4,5};
        int values[]= {10,5,4,8,6};

        int maxweight=5;

        System.out.println(knapsack(weights,values,maxweight,0));   //Recursion
        System.out.println(knapsackM(weights,values,maxweight,0));  //Memoization
    }

}
